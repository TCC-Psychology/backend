generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  cpf          String        @unique
  birthDate    DateTime?
  imageUrl     String?
  city         String?
  state        String?
  cep          String?
  description  String?
  gender       String?
  phone        String
  client       Client?
  psychologist Psychologist?
  userType     UserType
}

enum UserType {
  CLIENT
  PSYCHOLOGIST
  ADMIN
}

model Client {
  id                  Int                  @id @default(autoincrement())
  religion            String?
  relationshipStatus  RelationshipStatus?
  fatherName          String?
  fatherOccupation    String?
  motherName          String?
  motherOccupation    String?
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalAppointments MedicalAppointment[]
  medicalRecords      MedicalRecord[]
  notifications       Notification[]
  reviews             Review[]
}

model Psychologist {
  id                  Int                  @id @default(autoincrement())
  certificationNumber String?              @unique
  userId              String               @unique
  academicFormations  AcademicFormation[]
  medicalAppointments MedicalAppointment[]
  medicalRecords      MedicalRecord[]
  notifications       Notification[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews             Review[]
  segmentOfActivities SegmentOfActivity[]  @relation("PsychologistToSegmentOfActivity")
  targetAudiences     TargetAudience[]     @relation("PsychologistToTargetAudience")
}

model MedicalAppointment {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  date            DateTime
  status          AppointmentStatus @default(PENDING)
  appointmentType AppointmentType
  clientId        Int
  psychologistId  Int
  client          Client            @relation(fields: [clientId], references: [id])
  psychologist    Psychologist      @relation(fields: [psychologistId], references: [id])
  triage          Triage?
}

model Triage {
  id                   Int                @id @default(autoincrement())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  chiefComplaint       String
  triggeringFacts      String
  currentSymptoms      String
  medicalAppointmentId Int                @unique
  medicalAppointments  MedicalAppointment @relation(fields: [medicalAppointmentId], references: [id])
}

model Notification {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  description    String
  viewed         Boolean       @default(false)
  clientId       Int?
  psychologistId Int?
  client         Client?       @relation(fields: [clientId], references: [id])
  psychologist   Psychologist? @relation(fields: [psychologistId], references: [id])
}

model Review {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  description    String?
  rating         Int
  clientId       Int
  psychologistId Int
  client         Client       @relation(fields: [clientId], references: [id])
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])
}

model MedicalRecord {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  notes           String?
  theme           String
  mood            String
  objective       String
  evolutionRecord String
  clientId        Int
  psychologistId  Int
  client          Client       @relation(fields: [clientId], references: [id])
  psychologist    Psychologist @relation(fields: [psychologistId], references: [id])
}

model AcademicFormation {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  institution    String
  course         String
  description    String?
  startDate      DateTime
  endDate        DateTime
  psychologistId Int
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])
}

model TargetAudience {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  psychologist Psychologist[] @relation("PsychologistToTargetAudience")
}

model SegmentOfActivity {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  psychologist Psychologist[] @relation("PsychologistToSegmentOfActivity")
}

enum RelationshipStatus {
  single
  married
  divorced
  widowed
  separated
  domesticPartnership
}

enum AppointmentType {
  ONLINE
  PRESENCIAL
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  RESCHEDULED
  CANCELLED
}

enum Audience {
  CHILDREN
  TEENAGERS
  ADULTS
  SENIORS
}

enum PsychologistSegmentOfActivity {
  clinicalPsychology
  counselingPsychology
  forensicPsychology
  neuropsychology
  organizationalPsychology
  educationalPsychology
  healthPsychology
  sportsPsychology
  socialPsychology
  developmentalPsychology
  cognitivePsychology
  behavioralPsychology
}
